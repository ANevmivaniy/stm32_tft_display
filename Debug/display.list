
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003694  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  00032c0c  2**0
                  CONTENTS
  4 .ARM          00000008  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003844  08003844  00032c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c0c  20000000  0800384c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00032c0c  2**0
                  CONTENTS
 10 .bss          000001e8  20012c0c  20012c0c  00032c0c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20012df4  20012df4  00032c0c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00032c0c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4fc  00000000  00000000  00032c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000228e  00000000  00000000  00041138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  000433c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad8  00000000  00000000  00043f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219d3  00000000  00000000  00044a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebe4  00000000  00000000  0006642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6ec4  00000000  00000000  0007500f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013bed3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fe0  00000000  00000000  0013bf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20012c0c 	.word	0x20012c0c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003804 	.word	0x08003804

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20012c10 	.word	0x20012c10
 80001c4:	08003804 	.word	0x08003804

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f8a6 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f834 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f99a 	bl	8000804 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d0:	f000 f90c 	bl	80006ec <MX_SPI1_Init>
  MX_RNG_Init();
 80004d4:	f000 f8f6 	bl	80006c4 <MX_RNG_Init>
  MX_SPI2_Init();
 80004d8:	f000 f93e 	bl	8000758 <MX_SPI2_Init>
  MX_DCMI_Init();
 80004dc:	f000 f89c 	bl	8000618 <MX_DCMI_Init>
  MX_DMA_Init();
 80004e0:	f000 f970 	bl	80007c4 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8c0 	bl	8000668 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  TFT9341_ini(320, 240);
 80004e8:	21f0      	movs	r1, #240	; 0xf0
 80004ea:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80004ee:	f000 fca3 	bl	8000e38 <TFT9341_ini>
  HAL_Delay(500);
 80004f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f6:	f001 f8ff 	bl	80016f8 <HAL_Delay>
  TFT9341_FillScreen(TFT9341_RED);
 80004fa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80004fe:	f000 fc7f 	bl	8000e00 <TFT9341_FillScreen>
  HAL_Delay(2000);
 8000502:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000506:	f001 f8f7 	bl	80016f8 <HAL_Delay>
//	          TFT9341_DrawLine(TFT9341_RandColor(),i,0,i,TFT9341_HEIGHT-1);
//	        }
//	      }
//	      HAL_Delay(500);
//	      TFT9341_FillScreen(TFT9341_BLACK);
	  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f001 f8f3 	bl	80016f8 <HAL_Delay>
	  TFT9341_FillScreen(TFT9341_RED);
 8000512:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000516:	f000 fc73 	bl	8000e00 <TFT9341_FillScreen>
	  HAL_Delay(1000);
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f001 f8eb 	bl	80016f8 <HAL_Delay>
	  //TFT9341_FillScreen(TFT9341_GREEN);
	  TFT9341_DrawArray(image_data_320x240x16, 320, 120);
 8000522:	2278      	movs	r2, #120	; 0x78
 8000524:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000528:	4801      	ldr	r0, [pc, #4]	; (8000530 <main+0x70>)
 800052a:	f000 fc21 	bl	8000d70 <TFT9341_DrawArray>
	  HAL_Delay(1000);
 800052e:	e7ec      	b.n	800050a <main+0x4a>
 8000530:	20000000 	.word	0x20000000

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f956 	bl	80037f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <SystemClock_Config+0xdc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <SystemClock_Config+0xdc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xdc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <SystemClock_Config+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <SystemClock_Config+0xe0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <SystemClock_Config+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f974 	bl	80028a8 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c6:	f000 fa6b 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2105      	movs	r1, #5
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fbd5 	bl	8002d98 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f4:	f000 fa54 	bl	8000aa0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 80005f8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005fc:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000600:	2000      	movs	r0, #0
 8000602:	f002 fcaf 	bl	8002f64 <HAL_RCC_MCOConfig>
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_DCMI_Init+0x48>)
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <MX_DCMI_Init+0x4c>)
 8000620:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_DCMI_Init+0x48>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_DCMI_Init+0x48>)
 800062a:	2220      	movs	r2, #32
 800062c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DCMI_Init+0x48>)
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_DCMI_Init+0x48>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_DCMI_Init+0x48>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_DCMI_Init+0x48>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_DCMI_Init+0x48>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_DCMI_Init+0x48>)
 800064e:	f001 fa32 	bl	8001ab6 <HAL_DCMI_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000658:	f000 fa22 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20012d44 	.word	0x20012d44
 8000664:	50050000 	.word	0x50050000

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f001 ffbb 	bl	8002620 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f9f6 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20012c90 	.word	0x20012c90
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_RNG_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_RNG_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_RNG_Init+0x20>)
 80006d0:	f002 fdb2 	bl	8003238 <HAL_RNG_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 f9e1 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20012d84 	.word	0x20012d84
 80006e8:	50060800 	.word	0x50060800

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2218      	movs	r2, #24
 8000722:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f002 fda5 	bl	800328c <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f9aa 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20012d94 	.word	0x20012d94
 8000754:	40013000 	.word	0x40013000

08000758 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI2_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI2_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI2_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI2_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI2_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI2_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI2_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI2_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI2_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI2_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI2_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI2_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_SPI2_Init+0x64>)
 80007aa:	f002 fd6f 	bl	800328c <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f974 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20012c38 	.word	0x20012c38
 80007c0:	40003800 	.word	0x40003800

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x3c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_DMA_Init+0x3c>)
 80007d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2039      	movs	r0, #57	; 0x39
 80007ec:	f001 f883 	bl	80018f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007f0:	2039      	movs	r0, #57	; 0x39
 80007f2:	f001 f89c 	bl	800192e <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b9a      	ldr	r3, [pc, #616]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a99      	ldr	r2, [pc, #612]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b97      	ldr	r3, [pc, #604]	; (8000a88 <MX_GPIO_Init+0x284>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b93      	ldr	r3, [pc, #588]	; (8000a88 <MX_GPIO_Init+0x284>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a92      	ldr	r2, [pc, #584]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b90      	ldr	r3, [pc, #576]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a8b      	ldr	r2, [pc, #556]	; (8000a88 <MX_GPIO_Init+0x284>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b89      	ldr	r3, [pc, #548]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b85      	ldr	r3, [pc, #532]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a84      	ldr	r2, [pc, #528]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b82      	ldr	r3, [pc, #520]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b7e      	ldr	r3, [pc, #504]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a7d      	ldr	r2, [pc, #500]	; (8000a88 <MX_GPIO_Init+0x284>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b7b      	ldr	r3, [pc, #492]	; (8000a88 <MX_GPIO_Init+0x284>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <MX_GPIO_Init+0x284>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a76      	ldr	r2, [pc, #472]	; (8000a88 <MX_GPIO_Init+0x284>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b74      	ldr	r3, [pc, #464]	; (8000a88 <MX_GPIO_Init+0x284>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2101      	movs	r1, #1
 80008c6:	4871      	ldr	r0, [pc, #452]	; (8000a8c <MX_GPIO_Init+0x288>)
 80008c8:	f001 fe90 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	210e      	movs	r1, #14
 80008d0:	486f      	ldr	r0, [pc, #444]	; (8000a90 <MX_GPIO_Init+0x28c>)
 80008d2:	f001 fe8b 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	486c      	ldr	r0, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x288>)
 80008dc:	f001 fe86 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e0:	2200      	movs	r2, #0
 80008e2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e6:	486b      	ldr	r0, [pc, #428]	; (8000a94 <MX_GPIO_Init+0x290>)
 80008e8:	f001 fe80 	bl	80025ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4862      	ldr	r0, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x288>)
 8000904:	f001 fcd6 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000908:	2308      	movs	r3, #8
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	485a      	ldr	r0, [pc, #360]	; (8000a8c <MX_GPIO_Init+0x288>)
 8000924:	f001 fcc6 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4854      	ldr	r0, [pc, #336]	; (8000a90 <MX_GPIO_Init+0x28c>)
 800093e:	f001 fcb9 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	484d      	ldr	r0, [pc, #308]	; (8000a90 <MX_GPIO_Init+0x28c>)
 800095a:	f001 fcab 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095e:	230c      	movs	r3, #12
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4846      	ldr	r0, [pc, #280]	; (8000a90 <MX_GPIO_Init+0x28c>)
 8000976:	f001 fc9d 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	483e      	ldr	r0, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x288>)
 8000992:	f001 fc8f 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000996:	2304      	movs	r3, #4
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	483b      	ldr	r0, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x294>)
 80009aa:	f001 fc83 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c0:	2305      	movs	r3, #5
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4833      	ldr	r0, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x294>)
 80009cc:	f001 fc72 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009d4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <MX_GPIO_Init+0x290>)
 80009ea:	f001 fc63 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4821      	ldr	r0, [pc, #132]	; (8000a90 <MX_GPIO_Init+0x28c>)
 8000a0c:	f001 fc52 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	; (8000a90 <MX_GPIO_Init+0x28c>)
 8000a26:	f001 fc45 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4812      	ldr	r0, [pc, #72]	; (8000a90 <MX_GPIO_Init+0x28c>)
 8000a48:	f001 fc34 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_GPIO_Init+0x290>)
 8000a60:	f001 fc28 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_GPIO_Init+0x298>)
 8000a7a:	f001 fc1b 	bl	80022b4 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_DCMI_FrameEventCallback+0x54>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <HAL_DCMI_FrameEventCallback+0x1c>
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_DCMI_FrameEventCallback+0x54>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_DCMI_FrameEventCallback+0x58>)
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00b      	beq.n	8000ae8 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3328      	adds	r3, #40	; 0x28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ae4:	f001 f902 	bl	8001cec <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_DCMI_FrameEventCallback+0x58>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <HAL_DCMI_FrameEventCallback+0x58>)
 8000af0:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_DCMI_FrameEventCallback+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20012c2c 	.word	0x20012c2c
 8000b04:	20012c34 	.word	0x20012c34
 8000b08:	20012c28 	.word	0x20012c28
 8000b0c:	20012c30 	.word	0x20012c30

08000b10 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <not>:
extern RNG_HandleTypeDef hrng;
//-------------------------------------------------------------------
uint16_t TFT9341_WIDTH;
uint16_t TFT9341_HEIGHT;
//-------------------------------------------------------------------
uint16_t not(uint16_t a) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
	return ~a;
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	b29b      	uxth	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <TFT9341_SendCommand>:
//-------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <TFT9341_SendCommand+0x2c>)
 8000b50:	f001 fd4c 	bl	80025ec <HAL_GPIO_WritePin>
  //HAL_Delay(1);
  HAL_SPI_Transmit (&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000b54:	1df9      	adds	r1, r7, #7
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <TFT9341_SendCommand+0x30>)
 8000b5e:	f002 fc1e 	bl	800339e <HAL_SPI_Transmit>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	20012d94 	.word	0x20012d94

08000b74 <TFT9341_WriteData>:
	DC_DATA();
	HAL_Delay(5);
	HAL_SPI_Transmit (&hspi1, &dt, 1, HAL_MAX_DELAY);
}
//-------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2108      	movs	r1, #8
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <TFT9341_WriteData+0x54>)
 8000b84:	f001 fd32 	bl	80025ec <HAL_GPIO_WritePin>
	//HAL_Delay(5);
	while(buff_size > 0) {
 8000b88:	e015      	b.n	8000bb6 <TFT9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b90:	bf28      	it	cs
 8000b92:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000b96:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8000b98:	89fa      	ldrh	r2, [r7, #14]
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <TFT9341_WriteData+0x58>)
 8000ba2:	f002 fbfc 	bl	800339e <HAL_SPI_Transmit>
		buff += chunk_size;
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1e6      	bne.n	8000b8a <TFT9341_WriteData+0x16>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	20012d94 	.word	0x20012d94

08000bd0 <TFT9341_reset>:
//-------------------------------------------------------------------


void TFT9341_reset(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <TFT9341_reset+0x24>)
 8000bda:	f001 fd07 	bl	80025ec <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000bde:	2005      	movs	r0, #5
 8000be0:	f000 fd8a 	bl	80016f8 <HAL_Delay>
	RESET_IDLE();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2104      	movs	r1, #4
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TFT9341_reset+0x24>)
 8000bea:	f001 fcff 	bl	80025ec <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <TFT9341_SetAddrWindow>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8000c16:	202a      	movs	r0, #42	; 0x2a
 8000c18:	f7ff ff92 	bl	8000b40 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	737b      	strb	r3, [r7, #13]
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	0a1b      	lsrs	r3, r3, #8
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	73bb      	strb	r3, [r7, #14]
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2104      	movs	r1, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff96 	bl	8000b74 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8000c48:	202b      	movs	r0, #43	; 0x2b
 8000c4a:	f7ff ff79 	bl	8000b40 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	723b      	strb	r3, [r7, #8]
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	727b      	strb	r3, [r7, #9]
 8000c5e:	883b      	ldrh	r3, [r7, #0]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	72bb      	strb	r3, [r7, #10]
 8000c68:	883b      	ldrh	r3, [r7, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2104      	movs	r1, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff7d 	bl	8000b74 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8000c7a:	202c      	movs	r0, #44	; 0x2c
 8000c7c:	f7ff ff60 	bl	8000b40 <TFT9341_SendCommand>
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <TFT9341_FillRect>:
//-------------------------------------------------------------------
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4623      	mov	r3, r4
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80bb      	strh	r3, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	807b      	strh	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	803b      	strh	r3, [r7, #0]
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <TFT9341_FillRect+0xd8>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d252      	bcs.n	8000d56 <TFT9341_FillRect+0xce>
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <TFT9341_FillRect+0xdc>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	88ba      	ldrh	r2, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d24d      	bcs.n	8000d56 <TFT9341_FillRect+0xce>
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <TFT9341_FillRect+0xd8>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d248      	bcs.n	8000d56 <TFT9341_FillRect+0xce>
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <TFT9341_FillRect+0xdc>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	883a      	ldrh	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d243      	bcs.n	8000d56 <TFT9341_FillRect+0xce>
	if(x1>x2) swap(x1,x2);
 8000cce:	88fa      	ldrh	r2, [r7, #6]
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d905      	bls.n	8000ce2 <TFT9341_FillRect+0x5a>
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	827b      	strh	r3, [r7, #18]
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	80fb      	strh	r3, [r7, #6]
 8000cde:	8a7b      	ldrh	r3, [r7, #18]
 8000ce0:	807b      	strh	r3, [r7, #2]
	if(y1>y2) swap(y1,y2);
 8000ce2:	88ba      	ldrh	r2, [r7, #4]
 8000ce4:	883b      	ldrh	r3, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <TFT9341_FillRect+0x6e>
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	823b      	strh	r3, [r7, #16]
 8000cee:	883b      	ldrh	r3, [r7, #0]
 8000cf0:	80bb      	strh	r3, [r7, #4]
 8000cf2:	8a3b      	ldrh	r3, [r7, #16]
 8000cf4:	803b      	strh	r3, [r7, #0]
  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8000cf6:	883b      	ldrh	r3, [r7, #0]
 8000cf8:	887a      	ldrh	r2, [r7, #2]
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	f7ff ff7b 	bl	8000bf8 <TFT9341_SetAddrWindow>
  uint8_t data[] = { color >> 8, color & 0xFF };
 8000d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	733b      	strb	r3, [r7, #12]
 8000d0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	737b      	strb	r3, [r7, #13]
  DC_DATA();
 8000d12:	2201      	movs	r2, #1
 8000d14:	2108      	movs	r1, #8
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <TFT9341_FillRect+0xe0>)
 8000d18:	f001 fc68 	bl	80025ec <HAL_GPIO_WritePin>
  //HAL_Delay(5);
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e00a      	b.n	8000d38 <TFT9341_FillRect+0xb0>
  {
      HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8000d22:	f107 010c 	add.w	r1, r7, #12
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <TFT9341_FillRect+0xe4>)
 8000d2e:	f002 fb36 	bl	800339e <HAL_SPI_Transmit>
  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	887a      	ldrh	r2, [r7, #2]
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	8839      	ldrh	r1, [r7, #0]
 8000d42:	88ba      	ldrh	r2, [r7, #4]
 8000d44:	1a8a      	subs	r2, r1, r2
 8000d46:	3201      	adds	r2, #1
 8000d48:	fb02 f303 	mul.w	r3, r2, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d3e6      	bcc.n	8000d22 <TFT9341_FillRect+0x9a>
 8000d54:	e000      	b.n	8000d58 <TFT9341_FillRect+0xd0>
  if((x1 >= TFT9341_WIDTH) || (y1 >= TFT9341_HEIGHT) || (x2 >= TFT9341_WIDTH) || (y2 >= TFT9341_HEIGHT)) return;
 8000d56:	bf00      	nop
  }
}
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20012dee 	.word	0x20012dee
 8000d64:	20012dec 	.word	0x20012dec
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	20012d94 	.word	0x20012d94

08000d70 <TFT9341_DrawArray>:
	TFT9341_SendData(color & 0xFF);
}
//-------------------------------------------------------------------

void TFT9341_DrawArray(uint16_t array[], int x, int y)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  TFT9341_SetAddrWindow(0, 0, x, y);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2100      	movs	r1, #0
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff ff36 	bl	8000bf8 <TFT9341_SetAddrWindow>
  DC_DATA();
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4819      	ldr	r0, [pc, #100]	; (8000df8 <TFT9341_DrawArray+0x88>)
 8000d92:	f001 fc2b 	bl	80025ec <HAL_GPIO_WritePin>
  uint16_t a = 0x0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	827b      	strh	r3, [r7, #18]
  uint8_t data[] = {0x0, 0x0};
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	823b      	strh	r3, [r7, #16]
  for(uint32_t i = 0; i < x*y; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e01c      	b.n	8000dde <TFT9341_DrawArray+0x6e>
	{
		a = not(array[i]);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff feb8 	bl	8000b24 <not>
 8000db4:	4603      	mov	r3, r0
 8000db6:	827b      	strh	r3, [r7, #18]
		*data = a >> 8;
 8000db8:	8a7b      	ldrh	r3, [r7, #18]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	743b      	strb	r3, [r7, #16]
		*(data + 1) =  a & 0xFF;
 8000dc2:	8a7b      	ldrh	r3, [r7, #18]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	747b      	strb	r3, [r7, #17]
		HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8000dc8:	f107 0110 	add.w	r1, r7, #16
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	480a      	ldr	r0, [pc, #40]	; (8000dfc <TFT9341_DrawArray+0x8c>)
 8000dd4:	f002 fae3 	bl	800339e <HAL_SPI_Transmit>
  for(uint32_t i = 0; i < x*y; i++)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d3da      	bcc.n	8000da4 <TFT9341_DrawArray+0x34>
	}
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	20012d94 	.word	0x20012d94

08000e00 <TFT9341_FillScreen>:
}
//-------------------------------------------------------------------


void TFT9341_FillScreen(uint16_t color)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <TFT9341_FillScreen+0x30>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <TFT9341_FillScreen+0x34>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b299      	uxth	r1, r3
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	2100      	movs	r1, #0
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff ff30 	bl	8000c88 <TFT9341_FillRect>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20012dee 	.word	0x20012dee
 8000e34:	20012dec 	.word	0x20012dec

08000e38 <TFT9341_ini>:
{
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
}
//-------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	80fb      	strh	r3, [r7, #6]
 8000e44:	4613      	mov	r3, r2
 8000e46:	80bb      	strh	r3, [r7, #4]
	uint8_t data[15];
	CS_ACTIVE();
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	48a2      	ldr	r0, [pc, #648]	; (80010d8 <TFT9341_ini+0x2a0>)
 8000e4e:	f001 fbcd 	bl	80025ec <HAL_GPIO_WritePin>
	TFT9341_reset();
 8000e52:	f7ff febd 	bl	8000bd0 <TFT9341_reset>
	//Software Reset
	TFT9341_SendCommand(0x01);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff fe72 	bl	8000b40 <TFT9341_SendCommand>
	HAL_Delay(1000);
 8000e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e60:	f000 fc4a 	bl	80016f8 <HAL_Delay>
	  //Power Control A
	  data[0] = 0x39;
 8000e64:	2339      	movs	r3, #57	; 0x39
 8000e66:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x2C;
 8000e68:	232c      	movs	r3, #44	; 0x2c
 8000e6a:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x00;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x34;
 8000e70:	2334      	movs	r3, #52	; 0x34
 8000e72:	72fb      	strb	r3, [r7, #11]
	  data[4] = 0x02;
 8000e74:	2302      	movs	r3, #2
 8000e76:	733b      	strb	r3, [r7, #12]
	  TFT9341_SendCommand(0xCB);
 8000e78:	20cb      	movs	r0, #203	; 0xcb
 8000e7a:	f7ff fe61 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 5);
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2105      	movs	r1, #5
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe75 	bl	8000b74 <TFT9341_WriteData>
	  //Power Control B
	  data[0] = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	723b      	strb	r3, [r7, #8]
	  data[1] = 0xC1;
 8000e8e:	23c1      	movs	r3, #193	; 0xc1
 8000e90:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x30;
 8000e92:	2330      	movs	r3, #48	; 0x30
 8000e94:	72bb      	strb	r3, [r7, #10]
	  TFT9341_SendCommand(0xCF);
 8000e96:	20cf      	movs	r0, #207	; 0xcf
 8000e98:	f7ff fe52 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe66 	bl	8000b74 <TFT9341_WriteData>
//	  data[0] = 0x00;
//	  data[1] = 0x00;
//	  TFT9341_SendCommand(0xEA);
//	  TFT9341_WriteData(data, 2);
	  	  //Driver timing control A
	  	  data[0] = 0x84;
 8000ea8:	2384      	movs	r3, #132	; 0x84
 8000eaa:	723b      	strb	r3, [r7, #8]
	  	  data[1] = 0x11;
 8000eac:	2311      	movs	r3, #17
 8000eae:	727b      	strb	r3, [r7, #9]
	  	  data[2] = 0x7A;
 8000eb0:	237a      	movs	r3, #122	; 0x7a
 8000eb2:	72bb      	strb	r3, [r7, #10]
	  	  TFT9341_SendCommand(0xE8);
 8000eb4:	20e8      	movs	r0, #232	; 0xe8
 8000eb6:	f7ff fe43 	bl	8000b40 <TFT9341_SendCommand>
	  	  TFT9341_WriteData(data, 3);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe57 	bl	8000b74 <TFT9341_WriteData>
	  	  //Driver timing control B
	  	  data[0] = 0x66;
 8000ec6:	2366      	movs	r3, #102	; 0x66
 8000ec8:	723b      	strb	r3, [r7, #8]
	  	  data[1] = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	727b      	strb	r3, [r7, #9]
	  	  TFT9341_SendCommand(0xEA);
 8000ece:	20ea      	movs	r0, #234	; 0xea
 8000ed0:	f7ff fe36 	bl	8000b40 <TFT9341_SendCommand>
	  	  TFT9341_WriteData(data, 2);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe4a 	bl	8000b74 <TFT9341_WriteData>
	  //Power on Sequence control
	  data[0] = 0x64;
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x03;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x12;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x81;
 8000eec:	2381      	movs	r3, #129	; 0x81
 8000eee:	72fb      	strb	r3, [r7, #11]
	  TFT9341_SendCommand(0xED);
 8000ef0:	20ed      	movs	r0, #237	; 0xed
 8000ef2:	f7ff fe25 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 4);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2104      	movs	r1, #4
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fe39 	bl	8000b74 <TFT9341_WriteData>
	  //Pump ratio control
	  data[0] = 0x20;
 8000f02:	2320      	movs	r3, #32
 8000f04:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xF7);
 8000f06:	20f7      	movs	r0, #247	; 0xf7
 8000f08:	f7ff fe1a 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	2101      	movs	r1, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe2e 	bl	8000b74 <TFT9341_WriteData>
	  //Power Control,VRH[5:0]
	  data[0] = 0x10;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xC0);
 8000f1c:	20c0      	movs	r0, #192	; 0xc0
 8000f1e:	f7ff fe0f 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2101      	movs	r1, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe23 	bl	8000b74 <TFT9341_WriteData>
	  //Power Control,SAP[2:0];BT[3:0]
	  data[0] = 0x10;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xC1);
 8000f32:	20c1      	movs	r0, #193	; 0xc1
 8000f34:	f7ff fe04 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe18 	bl	8000b74 <TFT9341_WriteData>
	  //VCOM Control 1
	  data[0] = 0x3E;
 8000f44:	233e      	movs	r3, #62	; 0x3e
 8000f46:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x28;
 8000f48:	2328      	movs	r3, #40	; 0x28
 8000f4a:	727b      	strb	r3, [r7, #9]
	  TFT9341_SendCommand(0xC5);
 8000f4c:	20c5      	movs	r0, #197	; 0xc5
 8000f4e:	f7ff fdf7 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2102      	movs	r1, #2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe0b 	bl	8000b74 <TFT9341_WriteData>
	  //VCOM Control 2
	  data[0] = 0x86;
 8000f5e:	2386      	movs	r3, #134	; 0x86
 8000f60:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xC7);
 8000f62:	20c7      	movs	r0, #199	; 0xc7
 8000f64:	f7ff fdec 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fe00 	bl	8000b74 <TFT9341_WriteData>
	  //Memory Acsess Control
	  //data[0] = 0x48;
	  data[0] = 0x28;
 8000f74:	2328      	movs	r3, #40	; 0x28
 8000f76:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0x36);
 8000f78:	2036      	movs	r0, #54	; 0x36
 8000f7a:	f7ff fde1 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fdf5 	bl	8000b74 <TFT9341_WriteData>
	  //Pixel Format Set
	  data[0] = 0x55;//16bit
 8000f8a:	2355      	movs	r3, #85	; 0x55
 8000f8c:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0x3A);
 8000f8e:	203a      	movs	r0, #58	; 0x3a
 8000f90:	f7ff fdd6 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fdea 	bl	8000b74 <TFT9341_WriteData>
	  //Frame Rratio Control, Standard RGB Color
	  data[0] = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x18;
 8000fa4:	2318      	movs	r3, #24
 8000fa6:	727b      	strb	r3, [r7, #9]
	  TFT9341_SendCommand(0xB1);
 8000fa8:	20b1      	movs	r0, #177	; 0xb1
 8000faa:	f7ff fdc9 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fddd 	bl	8000b74 <TFT9341_WriteData>
//	  //Display Inversion Control
//	  data[0] = 0x01;
//	  TFT9341_SendCommand(0xB4);
//	  TFT9341_WriteData(data, 1);
	  //Display Function Control
	  data[0] = 0x08;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x82;
 8000fbe:	2382      	movs	r3, #130	; 0x82
 8000fc0:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x27;//320 строк
 8000fc2:	2327      	movs	r3, #39	; 0x27
 8000fc4:	72bb      	strb	r3, [r7, #10]
	  //data[2] = 0x13;//320 строк
	  TFT9341_SendCommand(0xB6);
 8000fc6:	20b6      	movs	r0, #182	; 0xb6
 8000fc8:	f7ff fdba 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fdce 	bl	8000b74 <TFT9341_WriteData>
	  //Enable 3G (пока не знаю что это за режим)
	  data[0] = 0x00;//не включаем
 8000fd8:	2300      	movs	r3, #0
 8000fda:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xF2);
 8000fdc:	20f2      	movs	r0, #242	; 0xf2
 8000fde:	f7ff fdaf 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdc3 	bl	8000b74 <TFT9341_WriteData>
	  //Gamma set
	  data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 8000fee:	2301      	movs	r3, #1
 8000ff0:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0x26);
 8000ff2:	2026      	movs	r0, #38	; 0x26
 8000ff4:	f7ff fda4 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fdb8 	bl	8000b74 <TFT9341_WriteData>
	  //Positive Gamma  Correction
	  data[0] = 0x0F;
 8001004:	230f      	movs	r3, #15
 8001006:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x31;
 8001008:	2331      	movs	r3, #49	; 0x31
 800100a:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x2B;
 800100c:	232b      	movs	r3, #43	; 0x2b
 800100e:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x0C;
 8001010:	230c      	movs	r3, #12
 8001012:	72fb      	strb	r3, [r7, #11]
	  data[4] = 0x0E;
 8001014:	230e      	movs	r3, #14
 8001016:	733b      	strb	r3, [r7, #12]
	  data[5] = 0x08;
 8001018:	2308      	movs	r3, #8
 800101a:	737b      	strb	r3, [r7, #13]
	  data[6] = 0x4E;
 800101c:	234e      	movs	r3, #78	; 0x4e
 800101e:	73bb      	strb	r3, [r7, #14]
	  data[7] = 0xF1;
 8001020:	23f1      	movs	r3, #241	; 0xf1
 8001022:	73fb      	strb	r3, [r7, #15]
	  data[8] = 0x37;
 8001024:	2337      	movs	r3, #55	; 0x37
 8001026:	743b      	strb	r3, [r7, #16]
	  data[9] = 0x07;
 8001028:	2307      	movs	r3, #7
 800102a:	747b      	strb	r3, [r7, #17]
	  data[10] = 0x10;
 800102c:	2310      	movs	r3, #16
 800102e:	74bb      	strb	r3, [r7, #18]
	  data[11] = 0x03;
 8001030:	2303      	movs	r3, #3
 8001032:	74fb      	strb	r3, [r7, #19]
	  data[12] = 0x0E;
 8001034:	230e      	movs	r3, #14
 8001036:	753b      	strb	r3, [r7, #20]
	  data[13] = 0x09;
 8001038:	2309      	movs	r3, #9
 800103a:	757b      	strb	r3, [r7, #21]
	  data[14] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	75bb      	strb	r3, [r7, #22]
	  TFT9341_SendCommand(0xE0);
 8001040:	20e0      	movs	r0, #224	; 0xe0
 8001042:	f7ff fd7d 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 15);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	210f      	movs	r1, #15
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fd91 	bl	8000b74 <TFT9341_WriteData>
	  //Negative Gamma  Correction
	  data[0] = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x0E;
 8001056:	230e      	movs	r3, #14
 8001058:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x14;
 800105a:	2314      	movs	r3, #20
 800105c:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x03;
 800105e:	2303      	movs	r3, #3
 8001060:	72fb      	strb	r3, [r7, #11]
	  data[4] = 0x11;
 8001062:	2311      	movs	r3, #17
 8001064:	733b      	strb	r3, [r7, #12]
	  data[5] = 0x07;
 8001066:	2307      	movs	r3, #7
 8001068:	737b      	strb	r3, [r7, #13]
	  data[6] = 0x31;
 800106a:	2331      	movs	r3, #49	; 0x31
 800106c:	73bb      	strb	r3, [r7, #14]
	  data[7] = 0xC1;
 800106e:	23c1      	movs	r3, #193	; 0xc1
 8001070:	73fb      	strb	r3, [r7, #15]
	  data[8] = 0x48;
 8001072:	2348      	movs	r3, #72	; 0x48
 8001074:	743b      	strb	r3, [r7, #16]
	  data[9] = 0x08;
 8001076:	2308      	movs	r3, #8
 8001078:	747b      	strb	r3, [r7, #17]
	  data[10] = 0x0F;
 800107a:	230f      	movs	r3, #15
 800107c:	74bb      	strb	r3, [r7, #18]
	  data[11] = 0x0C;
 800107e:	230c      	movs	r3, #12
 8001080:	74fb      	strb	r3, [r7, #19]
	  data[12] = 0x31;
 8001082:	2331      	movs	r3, #49	; 0x31
 8001084:	753b      	strb	r3, [r7, #20]
	  data[13] = 0x36;
 8001086:	2336      	movs	r3, #54	; 0x36
 8001088:	757b      	strb	r3, [r7, #21]
	  data[14] = 0x0F;
 800108a:	230f      	movs	r3, #15
 800108c:	75bb      	strb	r3, [r7, #22]
	  TFT9341_SendCommand(0xE1);
 800108e:	20e1      	movs	r0, #225	; 0xe1
 8001090:	f7ff fd56 	bl	8000b40 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 15);
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	210f      	movs	r1, #15
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd6a 	bl	8000b74 <TFT9341_WriteData>
	  TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 80010a0:	2011      	movs	r0, #17
 80010a2:	f7ff fd4d 	bl	8000b40 <TFT9341_SendCommand>
	  HAL_Delay(120);
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 fb26 	bl	80016f8 <HAL_Delay>
	  //Display ON
	data[0] = TFT9341_ROTATION;
 80010ac:	2348      	movs	r3, #72	; 0x48
 80010ae:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0x29);
 80010b0:	2029      	movs	r0, #41	; 0x29
 80010b2:	f7ff fd45 	bl	8000b40 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fd59 	bl	8000b74 <TFT9341_WriteData>
	TFT9341_WIDTH = w_size;
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <TFT9341_ini+0x2a4>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	8013      	strh	r3, [r2, #0]
	TFT9341_HEIGHT = h_size;
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <TFT9341_ini+0x2a8>)
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	8013      	strh	r3, [r2, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020000 	.word	0x40020000
 80010dc:	20012dee 	.word	0x20012dee
 80010e0:	20012dec 	.word	0x20012dec

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001122:	2007      	movs	r0, #7
 8001124:	f000 fbdc 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a63      	ldr	r2, [pc, #396]	; (80012e0 <HAL_DCMI_MspInit+0x1ac>)
 8001152:	4293      	cmp	r3, r2
 8001154:	f040 80bf 	bne.w	80012d6 <HAL_DCMI_MspInit+0x1a2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001160:	4a60      	ldr	r2, [pc, #384]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6353      	str	r3, [r2, #52]	; 0x34
 8001168:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a44      	ldr	r2, [pc, #272]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_DCMI_MspInit+0x1b0>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011e4:	2370      	movs	r3, #112	; 0x70
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011f4:	230d      	movs	r3, #13
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	483a      	ldr	r0, [pc, #232]	; (80012e8 <HAL_DCMI_MspInit+0x1b4>)
 8001200:	f001 f858 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001204:	2350      	movs	r3, #80	; 0x50
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120c:	2302      	movs	r3, #2
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001214:	230d      	movs	r3, #13
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4833      	ldr	r0, [pc, #204]	; (80012ec <HAL_DCMI_MspInit+0x1b8>)
 8001220:	f001 f848 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001224:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800122e:	2302      	movs	r3, #2
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001236:	230d      	movs	r3, #13
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	482b      	ldr	r0, [pc, #172]	; (80012f0 <HAL_DCMI_MspInit+0x1bc>)
 8001242:	f001 f837 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001246:	23c0      	movs	r3, #192	; 0xc0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124e:	2302      	movs	r3, #2
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001256:	230d      	movs	r3, #13
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4824      	ldr	r0, [pc, #144]	; (80012f4 <HAL_DCMI_MspInit+0x1c0>)
 8001262:	f001 f827 	bl	80022b4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 8001268:	4a24      	ldr	r2, [pc, #144]	; (80012fc <HAL_DCMI_MspInit+0x1c8>)
 800126a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 800126e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001272:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 800128a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80012aa:	4813      	ldr	r0, [pc, #76]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 80012ac:	f000 fc70 	bl	8001b90 <HAL_DMA_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_DCMI_MspInit+0x186>
    {
      Error_Handler();
 80012b6:	f7ff fbf3 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_DCMI_MspInit+0x1c4>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	204e      	movs	r0, #78	; 0x4e
 80012cc:	f000 fb13 	bl	80018f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80012d0:	204e      	movs	r0, #78	; 0x4e
 80012d2:	f000 fb2c 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	50050000 	.word	0x50050000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020400 	.word	0x40020400
 80012f8:	20012ce4 	.word	0x20012ce4
 80012fc:	40026428 	.word	0x40026428

08001300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_I2C_MspInit+0x84>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12c      	bne.n	800137c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_I2C_MspInit+0x88>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001344:	2312      	movs	r3, #18
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_I2C_MspInit+0x8c>)
 800135c:	f000 ffaa 	bl	80022b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_I2C_MspInit+0x88>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136e:	6413      	str	r3, [r2, #64]	; 0x40
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_I2C_MspInit+0x88>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_RNG_MspInit+0x3c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10d      	bne.n	80013be <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RNG_MspInit+0x40>)
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_RNG_MspInit+0x40>)
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	6353      	str	r3, [r2, #52]	; 0x34
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_RNG_MspInit+0x40>)
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	50060800 	.word	0x50060800
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a41      	ldr	r2, [pc, #260]	; (80014f8 <HAL_SPI_MspInit+0x124>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12c      	bne.n	8001450 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <HAL_SPI_MspInit+0x128>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <HAL_SPI_MspInit+0x128>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	482d      	ldr	r0, [pc, #180]	; (8001500 <HAL_SPI_MspInit+0x12c>)
 800144a:	f000 ff33 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800144e:	e04f      	b.n	80014f0 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_SPI_MspInit+0x130>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d14a      	bne.n	80014f0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_SPI_MspInit+0x128>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_SPI_MspInit+0x128>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_SPI_MspInit+0x128>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_SPI_MspInit+0x128>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_SPI_MspInit+0x128>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ae:	2304      	movs	r3, #4
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014be:	2305      	movs	r3, #5
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <HAL_SPI_MspInit+0x134>)
 80014ca:	f000 fef3 	bl	80022b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80014ce:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e0:	2305      	movs	r3, #5
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <HAL_SPI_MspInit+0x138>)
 80014ec:	f000 fee2 	bl	80022b4 <HAL_GPIO_Init>
}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	; 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40013000 	.word	0x40013000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40003800 	.word	0x40003800
 8001508:	40020800 	.word	0x40020800
 800150c:	40020400 	.word	0x40020400

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f8ac 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <DMA2_Stream1_IRQHandler+0x18>)
 800156c:	f000 fc38 	bl	8001de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  int i = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20012ce4 	.word	0x20012ce4

08001580 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <DCMI_IRQHandler+0x18>)
 8001588:	f000 f9ec 	bl	8001964 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */
  int i = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  /* USER CODE END DCMI_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20012d44 	.word	0x20012d44

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c6:	490e      	ldr	r1, [pc, #56]	; (8001600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015dc:	4c0b      	ldr	r4, [pc, #44]	; (800160c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ea:	f7ff ffd7 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f002 f8dd 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7fe ff65 	bl	80004c0 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20012c0c 	.word	0x20012c0c
  ldr r2, =_sidata
 8001604:	0800384c 	.word	0x0800384c
  ldr r2, =_sbss
 8001608:	20012c0c 	.word	0x20012c0c
  ldr r4, =_ebss
 800160c:	20012df4 	.word	0x20012df4

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f94f 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fd4c 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f967 	bl	800194a <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f92f 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20012c00 	.word	0x20012c00
 80016b0:	20012c08 	.word	0x20012c08
 80016b4:	20012c04 	.word	0x20012c04

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20012c08 	.word	0x20012c08
 80016dc:	20012df0 	.word	0x20012df0

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20012df0 	.word	0x20012df0

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20012c08 	.word	0x20012c08

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff29 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff3e 	bl	8001788 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff8e 	bl	8001834 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff31 	bl	80017a4 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa2 	bl	800189c <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d016      	beq.n	80019ac <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2204      	movs	r2, #4
 8001996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_DCMI_IRQHandler+0xf8>)
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f9f8 	bl	8001d9c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d016      	beq.n	80019e4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2202      	movs	r2, #2
 80019bc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2204      	movs	r2, #4
 80019ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <HAL_DCMI_IRQHandler+0xf8>)
 80019d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f9dc 	bl	8001d9c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2210      	movs	r2, #16
 80019f4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f83c 	bl	8001a74 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff f87e 	bl	8000b10 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d107      	bne.n	8001a3c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 021e 	bic.w	r2, r2, #30
 8001a3a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f82d 	bl	8000aac <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	08001a89 	.word	0x08001a89

08001a60 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff ffd9 	bl	8001a60 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e05f      	b.n	8001b88 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fb29 	bl	8001134 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fb26 	bl	8001134 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001afe:	f023 0308 	bic.w	r3, r3, #8
 8001b02:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b18:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b24:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b30:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d112      	bne.n	8001b68 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7f1b      	ldrb	r3, [r3, #28]
 8001b46:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7f5b      	ldrb	r3, [r3, #29]
 8001b4c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b4e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7f9b      	ldrb	r3, [r3, #30]
 8001b54:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001b56:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7fdb      	ldrb	r3, [r3, #31]
 8001b5e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001b64:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001b66:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 021e 	orr.w	r2, r2, #30
 8001b76:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff fda0 	bl	80016e0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e099      	b.n	8001ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bcc:	e00f      	b.n	8001bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bce:	f7ff fd87 	bl	80016e0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d908      	bls.n	8001bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e078      	b.n	8001ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e8      	bne.n	8001bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_DMA_Init+0x158>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4313      	orrs	r3, r2
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d117      	bne.n	8001cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa91 	bl	80021bc <DMA_CheckFifoParam>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e016      	b.n	8001ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa48 	bl	8002150 <DMA_CalcBaseAndBitshift>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	223f      	movs	r2, #63	; 0x3f
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	f010803f 	.word	0xf010803f

08001cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_DMA_Start_IT+0x26>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e040      	b.n	8001d94 <HAL_DMA_Start_IT+0xa8>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d12f      	bne.n	8001d86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f9da 	bl	80020f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0216 	orr.w	r2, r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0208 	orr.w	r2, r2, #8
 8001d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e005      	b.n	8001d92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d004      	beq.n	8001dba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00c      	b.n	8001dd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0201 	bic.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dec:	4b92      	ldr	r3, [pc, #584]	; (8002038 <HAL_DMA_IRQHandler+0x258>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a92      	ldr	r2, [pc, #584]	; (800203c <HAL_DMA_IRQHandler+0x25c>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01a      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2208      	movs	r2, #8
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2201      	movs	r2, #1
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2204      	movs	r2, #4
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d043      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03c      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	2210      	movs	r2, #16
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d018      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d024      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
 8001f0e:	e01f      	b.n	8001f50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
 8001f20:	e016      	b.n	8001f50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0208 	bic.w	r2, r2, #8
 8001f3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2220      	movs	r2, #32
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 808e 	beq.w	800207e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8086 	beq.w	800207e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	2220      	movs	r2, #32
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d136      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0216 	bic.w	r2, r2, #22
 8001f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_DMA_IRQHandler+0x1da>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0208 	bic.w	r2, r2, #8
 8001fc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	223f      	movs	r2, #63	; 0x3f
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d07d      	beq.n	80020ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
        }
        return;
 8001ff6:	e078      	b.n	80020ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01c      	beq.n	8002040 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d108      	bne.n	8002026 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	2b00      	cmp	r3, #0
 800201a:	d030      	beq.n	800207e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e02b      	b.n	800207e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d027      	beq.n	800207e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
 8002036:	e022      	b.n	800207e <HAL_DMA_IRQHandler+0x29e>
 8002038:	20012c00 	.word	0x20012c00
 800203c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0210 	bic.w	r2, r2, #16
 800205c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	2b00      	cmp	r3, #0
 8002084:	d032      	beq.n	80020ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d022      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2205      	movs	r2, #5
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d307      	bcc.n	80020c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f2      	bne.n	80020aa <HAL_DMA_IRQHandler+0x2ca>
 80020c4:	e000      	b.n	80020c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020c6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
 80020e8:	e000      	b.n	80020ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80020ea:	bf00      	nop
    }
  }
}
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop

080020f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002110:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d108      	bne.n	8002134 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002132:	e007      	b.n	8002144 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3b10      	subs	r3, #16
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800216a:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <DMA_CalcBaseAndBitshift+0x68>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d909      	bls.n	8002192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	1d1a      	adds	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	; 0x58
 8002190:	e007      	b.n	80021a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	aaaaaaab 	.word	0xaaaaaaab
 80021b8:	08003834 	.word	0x08003834

080021bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11f      	bne.n	8002216 <DMA_CheckFifoParam+0x5a>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d856      	bhi.n	800228a <DMA_CheckFifoParam+0xce>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <DMA_CheckFifoParam+0x28>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	08002207 	.word	0x08002207
 80021ec:	080021f5 	.word	0x080021f5
 80021f0:	0800228b 	.word	0x0800228b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d046      	beq.n	800228e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002204:	e043      	b.n	800228e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800220e:	d140      	bne.n	8002292 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002214:	e03d      	b.n	8002292 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221e:	d121      	bne.n	8002264 <DMA_CheckFifoParam+0xa8>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d837      	bhi.n	8002296 <DMA_CheckFifoParam+0xda>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <DMA_CheckFifoParam+0x70>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800223d 	.word	0x0800223d
 8002230:	08002243 	.word	0x08002243
 8002234:	0800223d 	.word	0x0800223d
 8002238:	08002255 	.word	0x08002255
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      break;
 8002240:	e030      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d025      	beq.n	800229a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002252:	e022      	b.n	800229a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800225c:	d11f      	bne.n	800229e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002262:	e01c      	b.n	800229e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d903      	bls.n	8002272 <DMA_CheckFifoParam+0xb6>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d003      	beq.n	8002278 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002270:	e018      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      break;
 8002276:	e015      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	e00b      	b.n	80022a2 <DMA_CheckFifoParam+0xe6>
      break;
 800228a:	bf00      	nop
 800228c:	e00a      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
 8002290:	e008      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e006      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
 8002298:	e004      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e002      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800229e:	bf00      	nop
 80022a0:	e000      	b.n	80022a4 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
    }
  } 
  
  return status; 
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e16b      	b.n	80025a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 815a 	bne.w	80025a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d005      	beq.n	8002306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	2b02      	cmp	r3, #2
 8002304:	d130      	bne.n	8002368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0201 	and.w	r2, r3, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b03      	cmp	r3, #3
 8002372:	d017      	beq.n	80023a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80b4 	beq.w	80025a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <HAL_GPIO_Init+0x30c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <HAL_GPIO_Init+0x30c>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b5d      	ldr	r3, [pc, #372]	; (80025c0 <HAL_GPIO_Init+0x30c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	4a5b      	ldr	r2, [pc, #364]	; (80025c4 <HAL_GPIO_Init+0x310>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_GPIO_Init+0x314>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02b      	beq.n	80024da <HAL_GPIO_Init+0x226>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a51      	ldr	r2, [pc, #324]	; (80025cc <HAL_GPIO_Init+0x318>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d025      	beq.n	80024d6 <HAL_GPIO_Init+0x222>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a50      	ldr	r2, [pc, #320]	; (80025d0 <HAL_GPIO_Init+0x31c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <HAL_GPIO_Init+0x21e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4f      	ldr	r2, [pc, #316]	; (80025d4 <HAL_GPIO_Init+0x320>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x21a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4e      	ldr	r2, [pc, #312]	; (80025d8 <HAL_GPIO_Init+0x324>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x216>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4d      	ldr	r2, [pc, #308]	; (80025dc <HAL_GPIO_Init+0x328>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x212>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_GPIO_Init+0x32c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x20e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4b      	ldr	r2, [pc, #300]	; (80025e4 <HAL_GPIO_Init+0x330>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x20a>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e00e      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024be:	2308      	movs	r3, #8
 80024c0:	e00c      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024c2:	2306      	movs	r3, #6
 80024c4:	e00a      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024c6:	2305      	movs	r3, #5
 80024c8:	e008      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024ce:	2303      	movs	r3, #3
 80024d0:	e004      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024da:	2300      	movs	r3, #0
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f002 0203 	and.w	r2, r2, #3
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	4093      	lsls	r3, r2
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ec:	4935      	ldr	r1, [pc, #212]	; (80025c4 <HAL_GPIO_Init+0x310>)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	3302      	adds	r3, #2
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_GPIO_Init+0x334>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251e:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_GPIO_Init+0x334>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_GPIO_Init+0x334>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002548:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_GPIO_Init+0x334>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x334>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002572:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <HAL_GPIO_Init+0x334>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_GPIO_Init+0x334>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <HAL_GPIO_Init+0x334>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3301      	adds	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b0f      	cmp	r3, #15
 80025ac:	f67f ae90 	bls.w	80022d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40021400 	.word	0x40021400
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40021c00 	.word	0x40021c00
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e12b      	b.n	800288a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fe5a 	bl	8001300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002684:	f000 fdc4 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8002688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4a81      	ldr	r2, [pc, #516]	; (8002894 <HAL_I2C_Init+0x274>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d807      	bhi.n	80026a4 <HAL_I2C_Init+0x84>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a80      	ldr	r2, [pc, #512]	; (8002898 <HAL_I2C_Init+0x278>)
 8002698:	4293      	cmp	r3, r2
 800269a:	bf94      	ite	ls
 800269c:	2301      	movls	r3, #1
 800269e:	2300      	movhi	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e006      	b.n	80026b2 <HAL_I2C_Init+0x92>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a7d      	ldr	r2, [pc, #500]	; (800289c <HAL_I2C_Init+0x27c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	bf94      	ite	ls
 80026ac:	2301      	movls	r3, #1
 80026ae:	2300      	movhi	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0e7      	b.n	800288a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a78      	ldr	r2, [pc, #480]	; (80028a0 <HAL_I2C_Init+0x280>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0c9b      	lsrs	r3, r3, #18
 80026c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_I2C_Init+0x274>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d802      	bhi.n	80026f4 <HAL_I2C_Init+0xd4>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3301      	adds	r3, #1
 80026f2:	e009      	b.n	8002708 <HAL_I2C_Init+0xe8>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a69      	ldr	r2, [pc, #420]	; (80028a4 <HAL_I2C_Init+0x284>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	3301      	adds	r3, #1
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	430b      	orrs	r3, r1
 800270e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800271a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	495c      	ldr	r1, [pc, #368]	; (8002894 <HAL_I2C_Init+0x274>)
 8002724:	428b      	cmp	r3, r1
 8002726:	d819      	bhi.n	800275c <HAL_I2C_Init+0x13c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e59      	subs	r1, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fbb1 f3f3 	udiv	r3, r1, r3
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	f640 73fc 	movw	r3, #4092	; 0xffc
 800273c:	400b      	ands	r3, r1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_I2C_Init+0x138>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e59      	subs	r1, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002750:	3301      	adds	r3, #1
 8002752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002756:	e051      	b.n	80027fc <HAL_I2C_Init+0x1dc>
 8002758:	2304      	movs	r3, #4
 800275a:	e04f      	b.n	80027fc <HAL_I2C_Init+0x1dc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d111      	bne.n	8002788 <HAL_I2C_Init+0x168>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	e012      	b.n	80027ae <HAL_I2C_Init+0x18e>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x196>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e022      	b.n	80027fc <HAL_I2C_Init+0x1dc>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10e      	bne.n	80027dc <HAL_I2C_Init+0x1bc>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1e58      	subs	r0, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	440b      	add	r3, r1
 80027cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027da:	e00f      	b.n	80027fc <HAL_I2C_Init+0x1dc>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1e58      	subs	r0, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	0099      	lsls	r1, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	6809      	ldr	r1, [r1, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800282a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6911      	ldr	r1, [r2, #16]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	430b      	orrs	r3, r1
 800283e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	000186a0 	.word	0x000186a0
 8002898:	001e847f 	.word	0x001e847f
 800289c:	003d08ff 	.word	0x003d08ff
 80028a0:	431bde83 	.word	0x431bde83
 80028a4:	10624dd3 	.word	0x10624dd3

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e264      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d075      	beq.n	80029b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	4ba3      	ldr	r3, [pc, #652]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4ba0      	ldr	r3, [pc, #640]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028de:	4b9d      	ldr	r3, [pc, #628]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b99      	ldr	r3, [pc, #612]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d157      	bne.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e23f      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x74>
 800290e:	4b91      	ldr	r3, [pc, #580]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a90      	ldr	r2, [pc, #576]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a8a      	ldr	r2, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b88      	ldr	r3, [pc, #544]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a87      	ldr	r2, [pc, #540]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 8002940:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a83      	ldr	r2, [pc, #524]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe febe 	bl	80016e0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe feba 	bl	80016e0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e204      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xc0>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe feaa 	bl	80016e0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fea6 	bl	80016e0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1f0      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c4      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4952      	ldr	r1, [pc, #328]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <HAL_RCC_OscConfig+0x2b0>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fe5f 	bl	80016e0 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fe5b 	bl	80016e0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a5      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4940      	ldr	r1, [pc, #256]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x2b0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fe3e 	bl	80016e0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe fe3a 	bl	80016e0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e184      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d030      	beq.n	8002af4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_OscConfig+0x2b4>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fe1e 	bl	80016e0 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fe1a 	bl	80016e0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e164      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x200>
 8002ac6:	e015      	b.n	8002af4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_OscConfig+0x2b4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fe07 	bl	80016e0 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fe03 	bl	80016e0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e14d      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a0 	beq.w	8002c42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x2b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d121      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_RCC_OscConfig+0x2b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_RCC_OscConfig+0x2b8>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fdc9 	bl	80016e0 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	e011      	b.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	42470000 	.word	0x42470000
 8002b5c:	42470e80 	.word	0x42470e80
 8002b60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe fdbc 	bl	80016e0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e106      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_RCC_OscConfig+0x4e4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2f0>
 8002b8a:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a80      	ldr	r2, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	e01c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x32a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x312>
 8002ba0:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	4b78      	ldr	r3, [pc, #480]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a77      	ldr	r2, [pc, #476]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x32a>
 8002bba:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc6:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe fd81 	bl	80016e0 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fd7d 	bl	80016e0 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0c5      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ee      	beq.n	8002be2 <HAL_RCC_OscConfig+0x33a>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fe fd6b 	bl	80016e0 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fd67 	bl	80016e0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0af      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	4b5a      	ldr	r3, [pc, #360]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a55      	ldr	r2, [pc, #340]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 809b 	beq.w	8002d82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d05c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d141      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c60:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe fd3b 	bl	80016e0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe fd37 	bl	80016e0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e081      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	4937      	ldr	r1, [pc, #220]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fd10 	bl	80016e0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fd0c 	bl	80016e0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e056      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x41c>
 8002ce2:	e04e      	b.n	8002d82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fcf9 	bl	80016e0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fcf5 	bl	80016e0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e03f      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x44a>
 8002d10:	e037      	b.n	8002d82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e032      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_RCC_OscConfig+0x4e8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d028      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d121      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d11a      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d4e:	4013      	ands	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d111      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	42470060 	.word	0x42470060

08002d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0cc      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d90c      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d044      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e067      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4934      	ldr	r1, [pc, #208]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fc2a 	bl	80016e0 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fc26 	bl	80016e0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20c      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f889 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fb8a 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	0800381c 	.word	0x0800381c
 8002f5c:	20012c00 	.word	0x20012c00
 8002f60:	20012c04 	.word	0x20012c04

08002f64 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08c      	sub	sp, #48	; 0x30
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d129      	bne.n	8002fca <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	481f      	ldr	r0, [pc, #124]	; (800302c <HAL_RCC_MCOConfig+0xc8>)
 8002fb0:	f7ff f980 	bl	80022b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	4919      	ldr	r1, [pc, #100]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002fc8:	e029      	b.n	800301e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <HAL_RCC_MCOConfig+0xcc>)
 8003004:	f7ff f956 	bl	80022b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	00d9      	lsls	r1, r3, #3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	430b      	orrs	r3, r1
 8003018:	4903      	ldr	r1, [pc, #12]	; (8003028 <HAL_RCC_MCOConfig+0xc4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
}
 800301e:	bf00      	nop
 8003020:	3730      	adds	r7, #48	; 0x30
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000
 8003030:	40020800 	.word	0x40020800

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	2300      	movs	r3, #0
 8003046:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80bd 	bhi.w	80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e0b7      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800306a:	60bb      	str	r3, [r7, #8]
       break;
 800306c:	e0b7      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003070:	60bb      	str	r3, [r7, #8]
      break;
 8003072:	e0b4      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d04d      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b58      	ldr	r3, [pc, #352]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	461a      	mov	r2, r3
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	ea02 0800 	and.w	r8, r2, r0
 80030a2:	ea03 0901 	and.w	r9, r3, r1
 80030a6:	4640      	mov	r0, r8
 80030a8:	4649      	mov	r1, r9
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	014b      	lsls	r3, r1, #5
 80030b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b8:	0142      	lsls	r2, r0, #5
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	ebb0 0008 	subs.w	r0, r0, r8
 80030c2:	eb61 0109 	sbc.w	r1, r1, r9
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	018b      	lsls	r3, r1, #6
 80030d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030d4:	0182      	lsls	r2, r0, #6
 80030d6:	1a12      	subs	r2, r2, r0
 80030d8:	eb63 0301 	sbc.w	r3, r3, r1
 80030dc:	f04f 0000 	mov.w	r0, #0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	00d9      	lsls	r1, r3, #3
 80030e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ea:	00d0      	lsls	r0, r2, #3
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	eb12 0208 	adds.w	r2, r2, r8
 80030f4:	eb43 0309 	adc.w	r3, r3, r9
 80030f8:	f04f 0000 	mov.w	r0, #0
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	0259      	lsls	r1, r3, #9
 8003102:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003106:	0250      	lsls	r0, r2, #9
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	f7fd f856 	bl	80001c8 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e04a      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	461a      	mov	r2, r3
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	ea02 0400 	and.w	r4, r2, r0
 800313e:	ea03 0501 	and.w	r5, r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	014b      	lsls	r3, r1, #5
 8003150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003154:	0142      	lsls	r2, r0, #5
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	1b00      	subs	r0, r0, r4
 800315c:	eb61 0105 	sbc.w	r1, r1, r5
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	018b      	lsls	r3, r1, #6
 800316a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316e:	0182      	lsls	r2, r0, #6
 8003170:	1a12      	subs	r2, r2, r0
 8003172:	eb63 0301 	sbc.w	r3, r3, r1
 8003176:	f04f 0000 	mov.w	r0, #0
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	00d9      	lsls	r1, r3, #3
 8003180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003184:	00d0      	lsls	r0, r2, #3
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	1912      	adds	r2, r2, r4
 800318c:	eb45 0303 	adc.w	r3, r5, r3
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0299      	lsls	r1, r3, #10
 800319a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800319e:	0290      	lsls	r0, r2, #10
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f7fd f80a 	bl	80001c8 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	60bb      	str	r3, [r7, #8]
      break;
 80031d6:	e002      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031da:	60bb      	str	r3, [r7, #8]
      break;
 80031dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031de:	68bb      	ldr	r3, [r7, #8]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_GetHCLKFreq+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20012c00 	.word	0x20012c00

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003214:	f7ff fff0 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	0800382c 	.word	0x0800382c

08003238 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e01c      	b.n	8003284 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	795b      	ldrb	r3, [r3, #5]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe f898 	bl	8001390 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0204 	orr.w	r2, r2, #4
 8003274:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07b      	b.n	8003396 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ae:	d009      	beq.n	80032c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
 80032b6:	e005      	b.n	80032c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe f878 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	ea42 0103 	orr.w	r1, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	f003 0104 	and.w	r1, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f003 0210 	and.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003384:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b088      	sub	sp, #32
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_SPI_Transmit+0x22>
 80033bc:	2302      	movs	r3, #2
 80033be:	e126      	b.n	800360e <HAL_SPI_Transmit+0x270>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c8:	f7fe f98a 	bl	80016e0 <HAL_GetTick>
 80033cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e2:	e10b      	b.n	80035fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_SPI_Transmit+0x52>
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f4:	e102      	b.n	80035fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2203      	movs	r2, #3
 80033fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343c:	d10f      	bne.n	800345e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d007      	beq.n	800347c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003484:	d14b      	bne.n	800351e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_SPI_Transmit+0xf6>
 800348e:	8afb      	ldrh	r3, [r7, #22]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d13e      	bne.n	8003512 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034b8:	e02b      	b.n	8003512 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d112      	bne.n	80034ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ec:	e011      	b.n	8003512 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ee:	f7fe f8f7 	bl	80016e0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d803      	bhi.n	8003506 <HAL_SPI_Transmit+0x168>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d102      	bne.n	800350c <HAL_SPI_Transmit+0x16e>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003510:	e074      	b.n	80035fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ce      	bne.n	80034ba <HAL_SPI_Transmit+0x11c>
 800351c:	e04c      	b.n	80035b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Transmit+0x18e>
 8003526:	8afb      	ldrh	r3, [r7, #22]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d140      	bne.n	80035ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003552:	e02c      	b.n	80035ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d113      	bne.n	800358a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	86da      	strh	r2, [r3, #54]	; 0x36
 8003588:	e011      	b.n	80035ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358a:	f7fe f8a9 	bl	80016e0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d803      	bhi.n	80035a2 <HAL_SPI_Transmit+0x204>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d102      	bne.n	80035a8 <HAL_SPI_Transmit+0x20a>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035ac:	e026      	b.n	80035fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1cd      	bne.n	8003554 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f8b3 	bl	8003728 <SPI_EndRxTxTransaction>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e000      	b.n	80035fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80035fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800360c:	7ffb      	ldrb	r3, [r7, #31]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003628:	f7fe f85a 	bl	80016e0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003638:	f7fe f852 	bl	80016e0 <HAL_GetTick>
 800363c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364e:	e054      	b.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d050      	beq.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003658:	f7fe f842 	bl	80016e0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	d902      	bls.n	800366e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13d      	bne.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800367c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003686:	d111      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003690:	d004      	beq.n	800369c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d107      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b4:	d10f      	bne.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e017      	b.n	800371a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d19b      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20012c00 	.word	0x20012c00

08003728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <SPI_EndRxTxTransaction+0x7c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <SPI_EndRxTxTransaction+0x80>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0d5b      	lsrs	r3, r3, #21
 8003740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003752:	d112      	bne.n	800377a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ff5a 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00f      	b.n	800379a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3b01      	subs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d0f2      	beq.n	800377a <SPI_EndRxTxTransaction+0x52>
 8003794:	e000      	b.n	8003798 <SPI_EndRxTxTransaction+0x70>
        break;
 8003796:	bf00      	nop
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20012c00 	.word	0x20012c00
 80037a8:	165e9f81 	.word	0x165e9f81

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4d0d      	ldr	r5, [pc, #52]	; (80037e4 <__libc_init_array+0x38>)
 80037b0:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	2600      	movs	r6, #0
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	4d0b      	ldr	r5, [pc, #44]	; (80037ec <__libc_init_array+0x40>)
 80037be:	4c0c      	ldr	r4, [pc, #48]	; (80037f0 <__libc_init_array+0x44>)
 80037c0:	f000 f820 	bl	8003804 <_init>
 80037c4:	1b64      	subs	r4, r4, r5
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	2600      	movs	r6, #0
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f855 3b04 	ldr.w	r3, [r5], #4
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	08003844 	.word	0x08003844
 80037e8:	08003844 	.word	0x08003844
 80037ec:	08003844 	.word	0x08003844
 80037f0:	08003848 	.word	0x08003848

080037f4 <memset>:
 80037f4:	4402      	add	r2, r0
 80037f6:	4603      	mov	r3, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <_init>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr

08003810 <_fini>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr
