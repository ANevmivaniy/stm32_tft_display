
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025810  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027c4c  08027c4c  0004000c  2**0
                  CONTENTS
  4 .ARM          00000008  08027c4c  08027c4c  00037c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027c54  08027c54  0004000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027c54  08027c54  00037c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027c58  08027c58  00037c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08027c5c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004000c  2**0
                  CONTENTS
 10 .bss          0000008c  2000000c  2000000c  0004000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20000098  20000098  0004000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007684  00000000  00000000  0004003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001653  00000000  00000000  000476c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00048d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000640  00000000  00000000  00049410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8d0  00000000  00000000  00049a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007c07  00000000  00000000  00069320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed77  00000000  00000000  00070f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012fc9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b1c  00000000  00000000  0012fcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002424 	.word	0x08002424

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002424 	.word	0x08002424

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd56 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f814 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8c6 	bl	800065c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_SPI1_Init>
  MX_RNG_Init();
 80004d4:	f000 f878 	bl	80005c8 <MX_RNG_Init>

  /* USER CODE BEGIN 2 */
  TFT9341_ini(240, 320);
 80004d8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80004dc:	20f0      	movs	r0, #240	; 0xf0
 80004de:	f000 fafb 	bl	8000ad8 <TFT9341_ini>
  //TFT9341_FillScreen(TFT9341_WHITE);
  TFT9341_DrawArray(image_data_320x240x16, 320,240);
 80004e2:	22f0      	movs	r2, #240	; 0xf0
 80004e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80004e8:	4801      	ldr	r0, [pc, #4]	; (80004f0 <main+0x30>)
 80004ea:	f000 faad 	bl	8000a48 <TFT9341_DrawArray>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x2e>
 80004f0:	0800243c 	.word	0x0800243c

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 ff86 	bl	8002414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000564:	2308      	movs	r3, #8
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4618      	mov	r0, r3
 800057c:	f001 f82c 	bl	80015d8 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000586:	f000 f9a7 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2105      	movs	r1, #5
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fa8d 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b4:	f000 f990 	bl	80008d8 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_RNG_Init+0x20>)
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <MX_RNG_Init+0x24>)
 80005d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_RNG_Init+0x20>)
 80005d4:	f001 fc40 	bl	8001e58 <HAL_RNG_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80005de:	f000 f97b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028
 80005ec:	50060800 	.word	0x50060800

080005f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_SPI1_Init+0x64>)
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <MX_SPI1_Init+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_SPI1_Init+0x64>)
 80005fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_SPI1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_SPI1_Init+0x64>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI1_Init+0x64>)
 8000624:	2218      	movs	r2, #24
 8000626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_SPI1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI1_Init+0x64>)
 800063c:	220a      	movs	r2, #10
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_SPI1_Init+0x64>)
 8000642:	f001 fc33 	bl	8001eac <HAL_SPI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800064c:	f000 f944 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000038 	.word	0x20000038
 8000658:	40013000 	.word	0x40013000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	4b92      	ldr	r3, [pc, #584]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a91      	ldr	r2, [pc, #580]	; (80008c0 <MX_GPIO_Init+0x264>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b8f      	ldr	r3, [pc, #572]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	61bb      	str	r3, [r7, #24]
 800068c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	4b8b      	ldr	r3, [pc, #556]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a8a      	ldr	r2, [pc, #552]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b88      	ldr	r3, [pc, #544]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b84      	ldr	r3, [pc, #528]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a83      	ldr	r2, [pc, #524]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b81      	ldr	r3, [pc, #516]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b7d      	ldr	r3, [pc, #500]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a7c      	ldr	r2, [pc, #496]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b7a      	ldr	r3, [pc, #488]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b76      	ldr	r3, [pc, #472]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a75      	ldr	r2, [pc, #468]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b73      	ldr	r3, [pc, #460]	; (80008c0 <MX_GPIO_Init+0x264>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b6f      	ldr	r3, [pc, #444]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a6e      	ldr	r2, [pc, #440]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <MX_GPIO_Init+0x264>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2101      	movs	r1, #1
 800071e:	4869      	ldr	r0, [pc, #420]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000720:	f000 ff40 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	211c      	movs	r1, #28
 8000728:	4867      	ldr	r0, [pc, #412]	; (80008c8 <MX_GPIO_Init+0x26c>)
 800072a:	f000 ff3b 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800072e:	2200      	movs	r2, #0
 8000730:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000734:	4865      	ldr	r0, [pc, #404]	; (80008cc <MX_GPIO_Init+0x270>)
 8000736:	f000 ff35 	bl	80015a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	485c      	ldr	r0, [pc, #368]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000752:	f000 fd8b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000766:	2305      	movs	r3, #5
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4854      	ldr	r0, [pc, #336]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000772:	f000 fd7b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800077a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <MX_GPIO_Init+0x26c>)
 800078c:	f000 fd6e 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000790:	231c      	movs	r3, #28
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4848      	ldr	r0, [pc, #288]	; (80008c8 <MX_GPIO_Init+0x26c>)
 80007a8:	f000 fd60 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007ac:	2304      	movs	r3, #4
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4844      	ldr	r0, [pc, #272]	; (80008d0 <MX_GPIO_Init+0x274>)
 80007c0:	f000 fd54 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d6:	2305      	movs	r3, #5
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	483b      	ldr	r0, [pc, #236]	; (80008d0 <MX_GPIO_Init+0x274>)
 80007e2:	f000 fd43 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4833      	ldr	r0, [pc, #204]	; (80008cc <MX_GPIO_Init+0x270>)
 8000800:	f000 fd34 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000804:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000816:	2306      	movs	r3, #6
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4828      	ldr	r0, [pc, #160]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000822:	f000 fd23 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4823      	ldr	r0, [pc, #140]	; (80008c8 <MX_GPIO_Init+0x26c>)
 800083c:	f000 fd16 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000840:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000852:	230a      	movs	r3, #10
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x26c>)
 800085e:	f000 fd05 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000862:	2320      	movs	r3, #32
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <MX_GPIO_Init+0x270>)
 8000876:	f000 fcf9 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800087a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000880:	2312      	movs	r3, #18
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088c:	2304      	movs	r3, #4
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_GPIO_Init+0x274>)
 8000898:	f000 fce8 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_GPIO_Init+0x278>)
 80008b2:	f000 fcdb 	bl	800126c <HAL_GPIO_Init>

}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	; 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40021000 	.word	0x40021000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>

080008e2 <not>:
extern RNG_HandleTypeDef hrng;
//-------------------------------------------------------------------
uint16_t TFT9341_WIDTH;
uint16_t TFT9341_HEIGHT;
//-------------------------------------------------------------------
uint16_t not(uint16_t a) {
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	80fb      	strh	r3, [r7, #6]
	return ~a;
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	b29b      	uxth	r3, r3
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <TFT9341_SendCommand>:
//-------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <TFT9341_SendCommand+0x2c>)
 8000910:	f000 fe48 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi1, &cmd, 1, 5000);
 8000914:	1df9      	adds	r1, r7, #7
 8000916:	f241 3388 	movw	r3, #5000	; 0x1388
 800091a:	2201      	movs	r2, #1
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <TFT9341_SendCommand+0x30>)
 800091e:	f001 fb4e 	bl	8001fbe <HAL_SPI_Transmit>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020000 	.word	0x40020000
 8000930:	20000038 	.word	0x20000038

08000934 <TFT9341_WriteData>:
{
	DC_DATA();
	HAL_SPI_Transmit (&hspi1, &dt, 1, 5000);
}
//-------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	DC_DATA();
 800093e:	2201      	movs	r2, #1
 8000940:	2108      	movs	r1, #8
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <TFT9341_WriteData+0x54>)
 8000944:	f000 fe2e 	bl	80015a4 <HAL_GPIO_WritePin>
	while(buff_size > 0) {
 8000948:	e015      	b.n	8000976 <TFT9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000950:	bf28      	it	cs
 8000952:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000956:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8000958:	89fa      	ldrh	r2, [r7, #14]
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <TFT9341_WriteData+0x58>)
 8000962:	f001 fb2c 	bl	8001fbe <HAL_SPI_Transmit>
		buff += chunk_size;
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1e6      	bne.n	800094a <TFT9341_WriteData+0x16>
	}
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000
 800098c:	20000038 	.word	0x20000038

08000990 <TFT9341_reset>:
//-------------------------------------------------------------------


void TFT9341_reset(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8000994:	2200      	movs	r2, #0
 8000996:	2104      	movs	r1, #4
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <TFT9341_reset+0x24>)
 800099a:	f000 fe03 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800099e:	2005      	movs	r0, #5
 80009a0:	f000 fb5a 	bl	8001058 <HAL_Delay>
	RESET_IDLE();
 80009a4:	2201      	movs	r2, #1
 80009a6:	2104      	movs	r1, #4
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <TFT9341_reset+0x24>)
 80009aa:	f000 fdfb 	bl	80015a4 <HAL_GPIO_WritePin>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000

080009b8 <TFT9341_SetAddrWindow>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4604      	mov	r4, r0
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4623      	mov	r3, r4
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	4603      	mov	r3, r0
 80009cc:	80bb      	strh	r3, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 80009d6:	202a      	movs	r0, #42	; 0x2a
 80009d8:	f7ff ff92 	bl	8000900 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	733b      	strb	r3, [r7, #12]
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	73bb      	strb	r3, [r7, #14]
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff96 	bl	8000934 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8000a08:	202b      	movs	r0, #43	; 0x2b
 8000a0a:	f7ff ff79 	bl	8000900 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	723b      	strb	r3, [r7, #8]
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	727b      	strb	r3, [r7, #9]
 8000a1e:	883b      	ldrh	r3, [r7, #0]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	72bb      	strb	r3, [r7, #10]
 8000a28:	883b      	ldrh	r3, [r7, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2104      	movs	r1, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff7d 	bl	8000934 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8000a3a:	202c      	movs	r0, #44	; 0x2c
 8000a3c:	f7ff ff60 	bl	8000900 <TFT9341_SendCommand>
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}

08000a48 <TFT9341_DrawArray>:
	TFT9341_SendData(color & 0xFF);
}
//-------------------------------------------------------------------

void TFT9341_DrawArray(uint16_t array[], int x, int y)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  TFT9341_SetAddrWindow(0, 0, x, y);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff ffaa 	bl	80009b8 <TFT9341_SetAddrWindow>
  DC_DATA();
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <TFT9341_DrawArray+0x88>)
 8000a6a:	f000 fd9b 	bl	80015a4 <HAL_GPIO_WritePin>
  uint16_t a = 0x0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	827b      	strh	r3, [r7, #18]
  uint8_t data[] = {0x0, 0x0};
 8000a72:	2300      	movs	r3, #0
 8000a74:	823b      	strh	r3, [r7, #16]
  for(uint32_t i = 0; i < x*y; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e01c      	b.n	8000ab6 <TFT9341_DrawArray+0x6e>
	{
		a = not(array[i]);
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff2b 	bl	80008e2 <not>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	827b      	strh	r3, [r7, #18]
		*data = a >> 8;
 8000a90:	8a7b      	ldrh	r3, [r7, #18]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	743b      	strb	r3, [r7, #16]
		*(data + 1) =  a & 0xFF;
 8000a9a:	8a7b      	ldrh	r3, [r7, #18]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	747b      	strb	r3, [r7, #17]
		HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8000aa0:	f107 0110 	add.w	r1, r7, #16
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <TFT9341_DrawArray+0x8c>)
 8000aac:	f001 fa87 	bl	8001fbe <HAL_SPI_Transmit>
  for(uint32_t i = 0; i < x*y; i++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d3da      	bcc.n	8000a7c <TFT9341_DrawArray+0x34>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	20000038 	.word	0x20000038

08000ad8 <TFT9341_ini>:
{
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
}
//-------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	80bb      	strh	r3, [r7, #4]
	uint8_t data[15];
	CS_ACTIVE();
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2110      	movs	r1, #16
 8000aec:	48a2      	ldr	r0, [pc, #648]	; (8000d78 <TFT9341_ini+0x2a0>)
 8000aee:	f000 fd59 	bl	80015a4 <HAL_GPIO_WritePin>
	TFT9341_reset();
 8000af2:	f7ff ff4d 	bl	8000990 <TFT9341_reset>
	//Software Reset
	TFT9341_SendCommand(0x01);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ff02 	bl	8000900 <TFT9341_SendCommand>
	HAL_Delay(1000);
 8000afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b00:	f000 faaa 	bl	8001058 <HAL_Delay>
	  //Power Control A
	  data[0] = 0x39;
 8000b04:	2339      	movs	r3, #57	; 0x39
 8000b06:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x2C;
 8000b08:	232c      	movs	r3, #44	; 0x2c
 8000b0a:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x34;
 8000b10:	2334      	movs	r3, #52	; 0x34
 8000b12:	72fb      	strb	r3, [r7, #11]
	  data[4] = 0x02;
 8000b14:	2302      	movs	r3, #2
 8000b16:	733b      	strb	r3, [r7, #12]
	  TFT9341_SendCommand(0xCB);
 8000b18:	20cb      	movs	r0, #203	; 0xcb
 8000b1a:	f7ff fef1 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 5);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2105      	movs	r1, #5
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff05 	bl	8000934 <TFT9341_WriteData>
	  //Power Control B
	  data[0] = 0x00;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	723b      	strb	r3, [r7, #8]
	  data[1] = 0xC1;
 8000b2e:	23c1      	movs	r3, #193	; 0xc1
 8000b30:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x30;
 8000b32:	2330      	movs	r3, #48	; 0x30
 8000b34:	72bb      	strb	r3, [r7, #10]
	  TFT9341_SendCommand(0xCF);
 8000b36:	20cf      	movs	r0, #207	; 0xcf
 8000b38:	f7ff fee2 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	2103      	movs	r1, #3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fef6 	bl	8000934 <TFT9341_WriteData>
	  //Driver timing control A
	  data[0] = 0x85;
 8000b48:	2385      	movs	r3, #133	; 0x85
 8000b4a:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x00;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x78;
 8000b50:	2378      	movs	r3, #120	; 0x78
 8000b52:	72bb      	strb	r3, [r7, #10]
	  TFT9341_SendCommand(0xE8);
 8000b54:	20e8      	movs	r0, #232	; 0xe8
 8000b56:	f7ff fed3 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	2103      	movs	r1, #3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fee7 	bl	8000934 <TFT9341_WriteData>
	  //Driver timing control B
	  data[0] = 0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	727b      	strb	r3, [r7, #9]
	  TFT9341_SendCommand(0xEA);
 8000b6e:	20ea      	movs	r0, #234	; 0xea
 8000b70:	f7ff fec6 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff feda 	bl	8000934 <TFT9341_WriteData>
	  //Power on Sequence control
	  data[0] = 0x64;
 8000b80:	2364      	movs	r3, #100	; 0x64
 8000b82:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x03;
 8000b84:	2303      	movs	r3, #3
 8000b86:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x12;
 8000b88:	2312      	movs	r3, #18
 8000b8a:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x81;
 8000b8c:	2381      	movs	r3, #129	; 0x81
 8000b8e:	72fb      	strb	r3, [r7, #11]
	  TFT9341_SendCommand(0xED);
 8000b90:	20ed      	movs	r0, #237	; 0xed
 8000b92:	f7ff feb5 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 4);
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fec9 	bl	8000934 <TFT9341_WriteData>
	  //Pump ratio control
	  data[0] = 0x20;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xF7);
 8000ba6:	20f7      	movs	r0, #247	; 0xf7
 8000ba8:	f7ff feaa 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff febe 	bl	8000934 <TFT9341_WriteData>
	  //Power Control,VRH[5:0]
	  data[0] = 0x10;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xC0);
 8000bbc:	20c0      	movs	r0, #192	; 0xc0
 8000bbe:	f7ff fe9f 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff feb3 	bl	8000934 <TFT9341_WriteData>
	  //Power Control,SAP[2:0];BT[3:0]
	  data[0] = 0x10;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xC1);
 8000bd2:	20c1      	movs	r0, #193	; 0xc1
 8000bd4:	f7ff fe94 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fea8 	bl	8000934 <TFT9341_WriteData>
	  //VCOM Control 1
	  data[0] = 0x3E;
 8000be4:	233e      	movs	r3, #62	; 0x3e
 8000be6:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x28;
 8000be8:	2328      	movs	r3, #40	; 0x28
 8000bea:	727b      	strb	r3, [r7, #9]
	  TFT9341_SendCommand(0xC5);
 8000bec:	20c5      	movs	r0, #197	; 0xc5
 8000bee:	f7ff fe87 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fe9b 	bl	8000934 <TFT9341_WriteData>
	  //VCOM Control 2
	  data[0] = 0x86;
 8000bfe:	2386      	movs	r3, #134	; 0x86
 8000c00:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xC7);
 8000c02:	20c7      	movs	r0, #199	; 0xc7
 8000c04:	f7ff fe7c 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fe90 	bl	8000934 <TFT9341_WriteData>
	  //Memory Acsess Control
	  //data[0] = 0x48;
	  data[0] = 0x28;
 8000c14:	2328      	movs	r3, #40	; 0x28
 8000c16:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0x36);
 8000c18:	2036      	movs	r0, #54	; 0x36
 8000c1a:	f7ff fe71 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe85 	bl	8000934 <TFT9341_WriteData>
	  //Pixel Format Set
	  data[0] = 0x55;//16bit
 8000c2a:	2355      	movs	r3, #85	; 0x55
 8000c2c:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0x3A);
 8000c2e:	203a      	movs	r0, #58	; 0x3a
 8000c30:	f7ff fe66 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fe7a 	bl	8000934 <TFT9341_WriteData>
	  //Frame Rratio Control, Standard RGB Color
	  data[0] = 0x00;
 8000c40:	2300      	movs	r3, #0
 8000c42:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x18;
 8000c44:	2318      	movs	r3, #24
 8000c46:	727b      	strb	r3, [r7, #9]
	  TFT9341_SendCommand(0xB1);
 8000c48:	20b1      	movs	r0, #177	; 0xb1
 8000c4a:	f7ff fe59 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2102      	movs	r1, #2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe6d 	bl	8000934 <TFT9341_WriteData>
//	  //Display Inversion Control
//	  data[0] = 0x01;
//	  TFT9341_SendCommand(0xB4);
//	  TFT9341_WriteData(data, 1);
	  //Display Function Control
	  data[0] = 0x08;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x82;
 8000c5e:	2382      	movs	r3, #130	; 0x82
 8000c60:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x27;//320 строк
 8000c62:	2327      	movs	r3, #39	; 0x27
 8000c64:	72bb      	strb	r3, [r7, #10]
	  TFT9341_SendCommand(0xB6);
 8000c66:	20b6      	movs	r0, #182	; 0xb6
 8000c68:	f7ff fe4a 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	2103      	movs	r1, #3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe5e 	bl	8000934 <TFT9341_WriteData>
	  //Enable 3G (пока не знаю что это за режим)
	  data[0] = 0x00;//не включаем
 8000c78:	2300      	movs	r3, #0
 8000c7a:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0xF2);
 8000c7c:	20f2      	movs	r0, #242	; 0xf2
 8000c7e:	f7ff fe3f 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe53 	bl	8000934 <TFT9341_WriteData>
	  //Gamma set
	  data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 8000c8e:	2301      	movs	r3, #1
 8000c90:	723b      	strb	r3, [r7, #8]
	  TFT9341_SendCommand(0x26);
 8000c92:	2026      	movs	r0, #38	; 0x26
 8000c94:	f7ff fe34 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe48 	bl	8000934 <TFT9341_WriteData>
	  //Positive Gamma  Correction
	  data[0] = 0x0F;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x31;
 8000ca8:	2331      	movs	r3, #49	; 0x31
 8000caa:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x2B;
 8000cac:	232b      	movs	r3, #43	; 0x2b
 8000cae:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x0C;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	72fb      	strb	r3, [r7, #11]
	  data[4] = 0x0E;
 8000cb4:	230e      	movs	r3, #14
 8000cb6:	733b      	strb	r3, [r7, #12]
	  data[5] = 0x08;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	737b      	strb	r3, [r7, #13]
	  data[6] = 0x4E;
 8000cbc:	234e      	movs	r3, #78	; 0x4e
 8000cbe:	73bb      	strb	r3, [r7, #14]
	  data[7] = 0xF1;
 8000cc0:	23f1      	movs	r3, #241	; 0xf1
 8000cc2:	73fb      	strb	r3, [r7, #15]
	  data[8] = 0x37;
 8000cc4:	2337      	movs	r3, #55	; 0x37
 8000cc6:	743b      	strb	r3, [r7, #16]
	  data[9] = 0x07;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	747b      	strb	r3, [r7, #17]
	  data[10] = 0x10;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	74bb      	strb	r3, [r7, #18]
	  data[11] = 0x03;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	74fb      	strb	r3, [r7, #19]
	  data[12] = 0x0E;
 8000cd4:	230e      	movs	r3, #14
 8000cd6:	753b      	strb	r3, [r7, #20]
	  data[13] = 0x09;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	757b      	strb	r3, [r7, #21]
	  data[14] = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75bb      	strb	r3, [r7, #22]
	  TFT9341_SendCommand(0xE0);
 8000ce0:	20e0      	movs	r0, #224	; 0xe0
 8000ce2:	f7ff fe0d 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 15);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	210f      	movs	r1, #15
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe21 	bl	8000934 <TFT9341_WriteData>
	  //Negative Gamma  Correction
	  data[0] = 0x00;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	723b      	strb	r3, [r7, #8]
	  data[1] = 0x0E;
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	727b      	strb	r3, [r7, #9]
	  data[2] = 0x14;
 8000cfa:	2314      	movs	r3, #20
 8000cfc:	72bb      	strb	r3, [r7, #10]
	  data[3] = 0x03;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	72fb      	strb	r3, [r7, #11]
	  data[4] = 0x11;
 8000d02:	2311      	movs	r3, #17
 8000d04:	733b      	strb	r3, [r7, #12]
	  data[5] = 0x07;
 8000d06:	2307      	movs	r3, #7
 8000d08:	737b      	strb	r3, [r7, #13]
	  data[6] = 0x31;
 8000d0a:	2331      	movs	r3, #49	; 0x31
 8000d0c:	73bb      	strb	r3, [r7, #14]
	  data[7] = 0xC1;
 8000d0e:	23c1      	movs	r3, #193	; 0xc1
 8000d10:	73fb      	strb	r3, [r7, #15]
	  data[8] = 0x48;
 8000d12:	2348      	movs	r3, #72	; 0x48
 8000d14:	743b      	strb	r3, [r7, #16]
	  data[9] = 0x08;
 8000d16:	2308      	movs	r3, #8
 8000d18:	747b      	strb	r3, [r7, #17]
	  data[10] = 0x0F;
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	74bb      	strb	r3, [r7, #18]
	  data[11] = 0x0C;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	74fb      	strb	r3, [r7, #19]
	  data[12] = 0x31;
 8000d22:	2331      	movs	r3, #49	; 0x31
 8000d24:	753b      	strb	r3, [r7, #20]
	  data[13] = 0x36;
 8000d26:	2336      	movs	r3, #54	; 0x36
 8000d28:	757b      	strb	r3, [r7, #21]
	  data[14] = 0x0F;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	75bb      	strb	r3, [r7, #22]
	  TFT9341_SendCommand(0xE1);
 8000d2e:	20e1      	movs	r0, #225	; 0xe1
 8000d30:	f7ff fde6 	bl	8000900 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 15);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	210f      	movs	r1, #15
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fdfa 	bl	8000934 <TFT9341_WriteData>
	  TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8000d40:	2011      	movs	r0, #17
 8000d42:	f7ff fddd 	bl	8000900 <TFT9341_SendCommand>
	  HAL_Delay(120);
 8000d46:	2078      	movs	r0, #120	; 0x78
 8000d48:	f000 f986 	bl	8001058 <HAL_Delay>
	  //Display ON
	data[0] = TFT9341_ROTATION;
 8000d4c:	2348      	movs	r3, #72	; 0x48
 8000d4e:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0x29);
 8000d50:	2029      	movs	r0, #41	; 0x29
 8000d52:	f7ff fdd5 	bl	8000900 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fde9 	bl	8000934 <TFT9341_WriteData>
	TFT9341_WIDTH = w_size;
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <TFT9341_ini+0x2a4>)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	8013      	strh	r3, [r2, #0]
	TFT9341_HEIGHT = h_size;
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <TFT9341_ini+0x2a8>)
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	8013      	strh	r3, [r2, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	20000092 	.word	0x20000092
 8000d80:	20000090 	.word	0x20000090

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc2:	2007      	movs	r0, #7
 8000dc4:	f000 fa1e 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_RNG_MspInit+0x3c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10d      	bne.n	8000e02 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_RNG_MspInit+0x40>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_RNG_MspInit+0x40>)
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	6353      	str	r3, [r2, #52]	; 0x34
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_RNG_MspInit+0x40>)
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	50060800 	.word	0x50060800
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_SPI_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e72:	23e0      	movs	r3, #224	; 0xe0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e82:	2305      	movs	r3, #5
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f000 f9ed 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013000 	.word	0x40013000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f890 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	; (8000f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f001 fa3d 	bl	80023cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fab5 	bl	80004c0 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f64:	08027c5c 	.word	0x08027c5c
  ldr r2, =_sbss
 8000f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f6c:	20000098 	.word	0x20000098

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f931 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff feec 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f93b 	bl	8001252 <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f911 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	20000094 	.word	0x20000094

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000094 	.word	0x20000094

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff47 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff5c 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffb0 	bl	80011c0 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e16b      	b.n	8001560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 815a 	bne.w	800155a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80b4 	beq.w	800155a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_GPIO_Init+0x30c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_GPIO_Init+0x310>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_GPIO_Init+0x314>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a51      	ldr	r2, [pc, #324]	; (8001584 <HAL_GPIO_Init+0x318>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_GPIO_Init+0x31c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x320>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x324>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x328>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_GPIO_Init+0x330>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x20a>
 8001472:	2307      	movs	r3, #7
 8001474:	e00e      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001476:	2308      	movs	r3, #8
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147a:	2306      	movs	r3, #6
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <HAL_GPIO_Init+0x310>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x334>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f ae90 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e264      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d075      	beq.n	80016e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f6:	4ba3      	ldr	r3, [pc, #652]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00c      	beq.n	800161c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160a:	2b08      	cmp	r3, #8
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161a:	d10b      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b99      	ldr	r3, [pc, #612]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05b      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d157      	bne.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e23f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x74>
 800163e:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a90      	ldr	r2, [pc, #576]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a8a      	ldr	r2, [pc, #552]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 8001670:	4b84      	ldr	r3, [pc, #528]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a83      	ldr	r2, [pc, #524]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a80      	ldr	r2, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fcd6 	bl	8001040 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fcd2 	bl	8001040 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e204      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xc0>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fcc2 	bl	8001040 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcbe 	bl	8001040 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1f0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4952      	ldr	r1, [pc, #328]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <HAL_RCC_OscConfig+0x2b0>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fc77 	bl	8001040 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc73 	bl	8001040 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4940      	ldr	r1, [pc, #256]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_OscConfig+0x2b0>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fc56 	bl	8001040 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fc52 	bl	8001040 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e184      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d030      	beq.n	8001824 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x2b4>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fc36 	bl	8001040 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc32 	bl	8001040 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e164      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x200>
 80017f6:	e015      	b.n	8001824 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x2b4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fc1f 	bl	8001040 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fc1b 	bl	8001040 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e14d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800181a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a0 	beq.w	8001972 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_OscConfig+0x2b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d121      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_RCC_OscConfig+0x2b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_RCC_OscConfig+0x2b8>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fbe1 	bl	8001040 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e011      	b.n	80018a6 <HAL_RCC_OscConfig+0x2ce>
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
 8001890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7ff fbd4 	bl	8001040 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e106      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x4e4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a80      	ldr	r2, [pc, #512]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	e01c      	b.n	8001902 <HAL_RCC_OscConfig+0x32a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x312>
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x32a>
 80018ea:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a74      	ldr	r2, [pc, #464]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff fb99 	bl	8001040 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fb95 	bl	8001040 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0c5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCC_OscConfig+0x33a>
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fb83 	bl	8001040 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fb7f 	bl	8001040 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0af      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a55      	ldr	r2, [pc, #340]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 809b 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d05c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d141      	bne.n	8001a14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fb53 	bl	8001040 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fb4f 	bl	8001040 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e081      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	061b      	lsls	r3, r3, #24
 80019e0:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb28 	bl	8001040 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fb24 	bl	8001040 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e056      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x41c>
 8001a12:	e04e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fb11 	bl	8001040 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fb0d 	bl	8001040 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e03f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x44a>
 8001a40:	e037      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e032      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d028      	beq.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d121      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d11a      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	42470060 	.word	0x42470060

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cc      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d044      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e067      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4934      	ldr	r1, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fa42 	bl	8001040 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff fa3e 	bl	8001040 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20c      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9a2 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08027c3c 	.word	0x08027c3c
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cac:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	f200 80bd 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc6:	e0b7      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cca:	60bb      	str	r3, [r7, #8]
       break;
 8001ccc:	e0b7      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001cd0:	60bb      	str	r3, [r7, #8]
      break;
 8001cd2:	e0b4      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cde:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d04d      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	ea02 0800 	and.w	r8, r2, r0
 8001d02:	ea03 0901 	and.w	r9, r3, r1
 8001d06:	4640      	mov	r0, r8
 8001d08:	4649      	mov	r1, r9
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	014b      	lsls	r3, r1, #5
 8001d14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d18:	0142      	lsls	r2, r0, #5
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	ebb0 0008 	subs.w	r0, r0, r8
 8001d22:	eb61 0109 	sbc.w	r1, r1, r9
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	018b      	lsls	r3, r1, #6
 8001d30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d34:	0182      	lsls	r2, r0, #6
 8001d36:	1a12      	subs	r2, r2, r0
 8001d38:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	00d9      	lsls	r1, r3, #3
 8001d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d4a:	00d0      	lsls	r0, r2, #3
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	eb12 0208 	adds.w	r2, r2, r8
 8001d54:	eb43 0309 	adc.w	r3, r3, r9
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	0259      	lsls	r1, r3, #9
 8001d62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d66:	0250      	lsls	r0, r2, #9
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f7fe fa26 	bl	80001c8 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e04a      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	ea02 0400 	and.w	r4, r2, r0
 8001d9e:	ea03 0501 	and.w	r5, r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	014b      	lsls	r3, r1, #5
 8001db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db4:	0142      	lsls	r2, r0, #5
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	1b00      	subs	r0, r0, r4
 8001dbc:	eb61 0105 	sbc.w	r1, r1, r5
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	018b      	lsls	r3, r1, #6
 8001dca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dce:	0182      	lsls	r2, r0, #6
 8001dd0:	1a12      	subs	r2, r2, r0
 8001dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	00d9      	lsls	r1, r3, #3
 8001de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de4:	00d0      	lsls	r0, r2, #3
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	1912      	adds	r2, r2, r4
 8001dec:	eb45 0303 	adc.w	r3, r5, r3
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0299      	lsls	r1, r3, #10
 8001dfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dfe:	0290      	lsls	r0, r2, #10
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	f7fe f9da 	bl	80001c8 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	60bb      	str	r3, [r7, #8]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e3a:	60bb      	str	r3, [r7, #8]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01c      	b.n	8001ea4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	795b      	ldrb	r3, [r3, #5]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe ffaa 	bl	8000dd4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07b      	b.n	8001fb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d108      	bne.n	8001ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ece:	d009      	beq.n	8001ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
 8001ed6:	e005      	b.n	8001ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe ff8a 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	ea42 0103 	orr.w	r1, r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0104 	and.w	r1, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0210 	and.w	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b088      	sub	sp, #32
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_SPI_Transmit+0x22>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e126      	b.n	800222e <HAL_SPI_Transmit+0x270>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fe8:	f7ff f82a 	bl	8001040 <HAL_GetTick>
 8001fec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002002:	e10b      	b.n	800221c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_Transmit+0x52>
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002014:	e102      	b.n	800221c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2203      	movs	r2, #3
 800201a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d10f      	bne.n	800207e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800206c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800207c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d007      	beq.n	800209c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a4:	d14b      	bne.n	800213e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_SPI_Transmit+0xf6>
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d13e      	bne.n	8002132 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	1c9a      	adds	r2, r3, #2
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020d8:	e02b      	b.n	8002132 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d112      	bne.n	800210e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	1c9a      	adds	r2, r3, #2
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	86da      	strh	r2, [r3, #54]	; 0x36
 800210c:	e011      	b.n	8002132 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800210e:	f7fe ff97 	bl	8001040 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d803      	bhi.n	8002126 <HAL_SPI_Transmit+0x168>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d102      	bne.n	800212c <HAL_SPI_Transmit+0x16e>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002130:	e074      	b.n	800221c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ce      	bne.n	80020da <HAL_SPI_Transmit+0x11c>
 800213c:	e04c      	b.n	80021d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_SPI_Transmit+0x18e>
 8002146:	8afb      	ldrh	r3, [r7, #22]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d140      	bne.n	80021ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002172:	e02c      	b.n	80021ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d113      	bne.n	80021aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80021a8:	e011      	b.n	80021ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021aa:	f7fe ff49 	bl	8001040 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d803      	bhi.n	80021c2 <HAL_SPI_Transmit+0x204>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d102      	bne.n	80021c8 <HAL_SPI_Transmit+0x20a>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021cc:	e026      	b.n	800221c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1cd      	bne.n	8002174 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f8b3 	bl	8002348 <SPI_EndRxTxTransaction>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	77fb      	strb	r3, [r7, #31]
 8002218:	e000      	b.n	800221c <HAL_SPI_Transmit+0x25e>
  }

error:
 800221a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800222c:	7ffb      	ldrb	r3, [r7, #31]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002248:	f7fe fefa 	bl	8001040 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002258:	f7fe fef2 	bl	8001040 <HAL_GetTick>
 800225c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	015b      	lsls	r3, r3, #5
 8002264:	0d1b      	lsrs	r3, r3, #20
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800226e:	e054      	b.n	800231a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d050      	beq.n	800231a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002278:	f7fe fee2 	bl	8001040 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	429a      	cmp	r2, r3
 8002286:	d902      	bls.n	800228e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d13d      	bne.n	800230a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800229c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a6:	d111      	bne.n	80022cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b0:	d004      	beq.n	80022bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ba:	d107      	bne.n	80022cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d4:	d10f      	bne.n	80022f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e017      	b.n	800233a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3b01      	subs	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4013      	ands	r3, r2
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	429a      	cmp	r2, r3
 8002336:	d19b      	bne.n	8002270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000

08002348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <SPI_EndRxTxTransaction+0x7c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <SPI_EndRxTxTransaction+0x80>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002372:	d112      	bne.n	800239a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff ff5a 	bl	8002238 <SPI_WaitFlagStateUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f043 0220 	orr.w	r2, r3, #32
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e00f      	b.n	80023ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d0f2      	beq.n	800239a <SPI_EndRxTxTransaction+0x52>
 80023b4:	e000      	b.n	80023b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80023b6:	bf00      	nop
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000000 	.word	0x20000000
 80023c8:	165e9f81 	.word	0x165e9f81

080023cc <__libc_init_array>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	4d0d      	ldr	r5, [pc, #52]	; (8002404 <__libc_init_array+0x38>)
 80023d0:	4c0d      	ldr	r4, [pc, #52]	; (8002408 <__libc_init_array+0x3c>)
 80023d2:	1b64      	subs	r4, r4, r5
 80023d4:	10a4      	asrs	r4, r4, #2
 80023d6:	2600      	movs	r6, #0
 80023d8:	42a6      	cmp	r6, r4
 80023da:	d109      	bne.n	80023f0 <__libc_init_array+0x24>
 80023dc:	4d0b      	ldr	r5, [pc, #44]	; (800240c <__libc_init_array+0x40>)
 80023de:	4c0c      	ldr	r4, [pc, #48]	; (8002410 <__libc_init_array+0x44>)
 80023e0:	f000 f820 	bl	8002424 <_init>
 80023e4:	1b64      	subs	r4, r4, r5
 80023e6:	10a4      	asrs	r4, r4, #2
 80023e8:	2600      	movs	r6, #0
 80023ea:	42a6      	cmp	r6, r4
 80023ec:	d105      	bne.n	80023fa <__libc_init_array+0x2e>
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
 80023f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f4:	4798      	blx	r3
 80023f6:	3601      	adds	r6, #1
 80023f8:	e7ee      	b.n	80023d8 <__libc_init_array+0xc>
 80023fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80023fe:	4798      	blx	r3
 8002400:	3601      	adds	r6, #1
 8002402:	e7f2      	b.n	80023ea <__libc_init_array+0x1e>
 8002404:	08027c54 	.word	0x08027c54
 8002408:	08027c54 	.word	0x08027c54
 800240c:	08027c54 	.word	0x08027c54
 8002410:	08027c58 	.word	0x08027c58

08002414 <memset>:
 8002414:	4402      	add	r2, r0
 8002416:	4603      	mov	r3, r0
 8002418:	4293      	cmp	r3, r2
 800241a:	d100      	bne.n	800241e <memset+0xa>
 800241c:	4770      	bx	lr
 800241e:	f803 1b01 	strb.w	r1, [r3], #1
 8002422:	e7f9      	b.n	8002418 <memset+0x4>

08002424 <_init>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	bf00      	nop
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr

08002430 <_fini>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr
